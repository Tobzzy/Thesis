const Test = require('../models/test.model.js');
const nmap = require('node-nmap');
nmap.nmapLocation = "nmap";
const nodemailer = require('nodemailer');
const hbs = require('nodemailer-express-handlebars');
var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'pent38484@gmail.com',
        pass: 'Thesis2020'
    }
    });

    const handlebarOptions = {
        viewEngine: {
          extName: '.handlebars',
          partialsDir: './app/views',
          layoutsDir: './app/views',
          defaultLayout: 'index.handlebars',
        },
        viewPath: './app/views',
        extName: '.handlebars',
      };
      
      transporter.use('compile', hbs(handlebarOptions));

let testing;
let email;
let domain;
exports.create = (req, res) => {
    if((!req.body.domain) & (!req.body.email)) {
        return res.status(400).send({
            message: "Domain and email can not be empty"
        });
    }
    email = req.body.email
    domain = req.body.domain
    let osandports = new nmap.OsAndPortScan(domain);
    osandports.on('complete',function(data){
    testing = data;

    const test = new Test({
        domain: domain,
        email: email,
        test: testing
    });
    let mailOptions = {
        from: 'pent38484@gmail.com',
        to: email,
        subject: 'your test result',
        template: 'index'
        };

        transporter.sendMail(mailOptions, function(error, info){
            if (error) {
                console.log(error);
            } else {
                console.log('Email sent: ' + info.response);
            }
        });

    test.save()
    .then(data => {
        res.send(data);
    }).catch(err => {
        res.status(500).send({
            message: err.message || "Some error occurred while creating the Test."
        });
    });
    });


    osandports.on('error', function(error){
        console.log(error);
        });
        
    osandports.startScan();
};

exports.findAll = (req, res) => {
    Test.find()
    .then(tests => {
        res.send(tests);
    }).catch(err => {
        res.status(500).send({
            message: err.message || "Some error occurred while retrieving Tests."
        });
    });
};

exports.findOne = (req, res) => {
    Test.findById(req.params.testId)
    .then(test => {
        if(!test) {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });            
        }
        res.send(test);
    }).catch(err => {
        if(err.kind === 'ObjectId') {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });                
        }
        return res.status(500).send({
            message: "Error retrieving test with id " + req.params.testId
        });
    });
};

exports.update = (req, res) => {
    if((!req.body.domain) & (!req.body.email)){
        return res.status(400).send({
            message: "Domain can not be empty"
        });
    }

    Test.findByIdAndUpdate(req.params.testId, {
        domain: req.body.domain,
        email: req.body.email,
        test: req.body.test
    }, {new: true})
    .then(test => {
        if(!test) {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });
        }
        res.send(test);
    }).catch(err => {
        if(err.kind === 'ObjectId') {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });                
        }
        return res.status(500).send({
            message: "Error updating test with id " + req.params.testId
        });
    });
};

exports.delete = (req, res) => {
    Test.findByIdAndRemove(req.params.testId)
    .then(test => {
        if(!test) {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });
        }
        res.send({message: "Test deleted successfully!"});
    }).catch(err => {
        if(err.kind === 'ObjectId' || err.name === 'NotFound') {
            return res.status(404).send({
                message: "Test not found with id " + req.params.testId
            });                
        }
        return res.status(500).send({
            message: "Could not delete test with id " + req.params.testId
        });
    });
};